#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_BOOKS 100
#define MAX_READERS 100
#define MAX_TITLE 100
#define MAX_NAME 100
#define MAX_CATEGORY 50
#define MAX_LOANS 100

// Structures
typedef struct {
    int id;
    char title[MAX_TITLE];
    char author[MAX_NAME];
    char category[MAX_CATEGORY];
    int available; // 1 if available, 0 if loaned
} Book;

typedef struct {
    int id;
    char name[MAX_NAME];
} Reader;

typedef struct {
    int bookId;
    int readerId;
    char loanDate[11];     // Format: YYYY-MM-DD
    char returnDate[11];   // Format: YYYY-MM-DD or "Not Returned"
} Loan;

// Global variables
Book books[MAX_BOOKS];
Reader readers[MAX_READERS];
Loan loans[MAX_LOANS];
int bookCount = 0;
int readerCount = 0;
int loanCount = 0;

// Function prototypes
void displayMainMenu();
void manageBooks();
void manageReaders();
void addBook();
void addReader();
void registerLoan();
void registerReturn();
void displayReports();
void printAvailableBooks();
void printLoanedBooks();
void printReaders();
void printLoanReport();
void saveData();
void loadData();
void getCurrentDate(char *dateBuffer);

// Main function
int main() {
    loadData(); // Load data from file
    int choice;

    do {
        displayMainMenu();
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        getchar(); // Clear newline left by scanf

        switch (choice) {
            case 1:
                manageBooks();
                break;
            case 2:
                manageReaders();
                break;
            case 3:
                registerLoan();
                break;
            case 4:
                registerReturn();
                break;
            case 5:
                displayReports();
                break;
            case 6:
                saveData(); // Save data to file
                printf("Exiting the application.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}

// Main menu
void displayMainMenu() {
    printf("\nMain Menu:\n");
    printf("1. Manage Books\n");
    printf("2. Manage Readers\n");
    printf("3. Register Loan\n");
    printf("4. Register Return\n");
    printf("5. Display Reports\n");
    printf("6. Exit\n");
}

// Manage Books
void manageBooks() {
    int choice;
    do {
        printf("\nManage Books:\n");
        printf("1. Add Book\n");
        printf("2. Back to Main Menu\n");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        getchar(); // Clear newline left by scanf

        switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
                printf("Returning to main menu.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 2);
}

// Add Book
void addBook() {
    if (bookCount >= MAX_BOOKS) {
        printf("Book list is full. Cannot add more books.\n");
        return;
    }

    printf("\nEnter book details:\n");
    books[bookCount].id = bookCount + 1;

    printf("Title: ");
    fgets(books[bookCount].title, MAX_TITLE, stdin);
    books[bookCount].title[strcspn(books[bookCount].title, "\n")] = 0;

    printf("Author: ");
    fgets(books[bookCount].author, MAX_NAME, stdin);
    books[bookCount].author[strcspn(books[bookCount].author, "\n")] = 0;

    printf("Category: ");
    fgets(books[bookCount].category, MAX_CATEGORY, stdin);
    books[bookCount].category[strcspn(books[bookCount].category, "\n")] = 0;

    books[bookCount].available = 1;
    bookCount++;

    printf("Book added successfully!\n");
}

// Manage Readers
void manageReaders() {
    int choice;
    do {
        printf("\nManage Readers:\n");
        printf("1. Add Reader\n");
        printf("2. Back to Main Menu\n");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);
        getchar(); // Clear newline left by scanf

        switch (choice) {
            case 1:
                addReader();
                break;
            case 2:
                printf("Returning to main menu.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 2);
}

// Add Reader
void addReader() {
    if (readerCount >= MAX_READERS) {
        printf("Reader list is full. Cannot add more readers.\n");
        return;
    }

    printf("\nEnter reader details:\n");
    readers[readerCount].id = readerCount + 1;

    printf("Name: ");
    fgets(readers[readerCount].name, MAX_NAME, stdin);
    readers[readerCount].name[strcspn(readers[readerCount].name, "\n")] = 0;

    readerCount++;

    printf("Reader added successfully!\n");
}

// Register Loan
void registerLoan() {
    int bookId, readerId;
    char loanDate[11];

    printf("\nEnter Book ID to loan: ");
    scanf("%d", &bookId);
    getchar(); // Clear newline

    printf("Enter Reader ID: ");
    scanf("%d", &readerId);
    getchar(); // Clear newline

    if (bookId < 1 || bookId > bookCount || readerId < 1 || readerId > readerCount) {
        printf("Invalid Book or Reader ID.\n");
        return;
    }

    if (!books[bookId - 1].available) {
        printf("Book is already loaned out.\n");
        return;
    }

    books[bookId - 1].available = 0;

    getCurrentDate(loanDate);
    loans[loanCount].bookId = bookId;
    loans[loanCount].readerId = readerId;
    strcpy(loans[loanCount].loanDate, loanDate);
    strcpy(loans[loanCount].returnDate, "Not Returned");
    loanCount++;

    printf("Book ID %d loaned to Reader ID %d on %s.\n", bookId, readerId, loanDate);
}

// Register Return
void registerReturn() {
    int bookId;
    char returnDate[11];

    printf("\nEnter Book ID to return: ");
    scanf("%d", &bookId);
    getchar(); // Clear newline

    if (bookId < 1 || bookId > bookCount) {
        printf("Invalid Book ID.\n");
        return;
    }

    if (books[bookId - 1].available) {
        printf("Book is not loaned out.\n");
        return;
    }

    books[bookId - 1].available = 1;

    for (int i = 0; i < loanCount; i++) {
        if (loans[i].bookId == bookId && strcmp(loans[i].returnDate, "Not Returned") == 0) {
            getCurrentDate(returnDate);
            strcpy(loans[i].returnDate, returnDate);
            printf("Book ID %d returned successfully on %s.\n", bookId, returnDate);
            return;
        }
    }

    printf("Loan record not found.\n");
}

// Display Reports
void displayReports() {
    int choice;
    do {
        printf("\nReports:\n");
        printf("1. Available Books\n");
        printf("2. Loaned Books\n");
        printf("3. Readers\n");
        printf("4. Loan Report\n");
        printf("5. Back to Main Menu\n");

        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printAvailableBooks();
                break;
            case 2:
                printLoanedBooks();
                break;
            case 3:
                printReaders();
                break;
            case 4:
                printLoanReport();
                break;
            case 5:
                printf("Returning to main menu.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);
}

// Print Available Books
void printAvailableBooks() {
    printf("\nAvailable Books:\n");
    for (int i = 0; i < bookCount; i++) {
        if (books[i].available) {
            printf("ID: %d, Title: %s, Author: %s, Category: %s\n",
                   books[i].id, books[i].title, books[i].author, books[i].category);
        }
    }
}

// Print Loaned Books
void printLoanedBooks() {
    printf("\nLoaned Books:\n");
    for (int i = 0; i < bookCount; i++) {
        if (!books[i].available) {
            printf("ID: %d, Title: %s, Author: %s, Category: %s\n",
                   books[i].id, books[i].title, books[i].author, books[i].category);
        }
    }
}

// Print Readers
void printReaders() {
    printf("\nRegistered Readers:\n");
    for (int i = 0; i < readerCount; i++) {
        printf("ID: %d, Name: %s\n", readers[i].id, readers[i].name);
    }
}

// Print Loan Report
void printLoanReport() {
    printf("\nLoan Report:\n");
    printf("%-5s %-20s %-20s %-20s %-15s %-15s\n", "Loan#", "Reader Name", "Book Title", "Author", "Loan Date", "Return Date");
    printf("-----------------------------------------------------------------------------------------------\n");
    for (int i = 0; i < loanCount; i++) {
        int bookId = loans[i].bookId - 1;
        int readerId = loans[i].readerId - 1;

        printf("%-5d %-20s %-20s %-20s %-15s %-15s\n",
               i + 1,
               readers[readerId].name,
               books[bookId].title,
               books[bookId].author,
               loans[i].loanDate,
               loans[i].returnDate);
    }
}

// Save and Load Data (Stubs for persistence)
void saveData() {
    // Save data to a file (implementation can be added here)
}

void loadData() {
    // Load data from a file (implementation can be added here)
}

// Get Current Date
void getCurrentDate(char *dateBuffer) {
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    sprintf(dateBuffer, "%04d-%02d-%02d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
}
