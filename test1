#include <stdio.h>
#include <string.h>
#include <time.h>

#define MAX_BOOKS 100
#define MAX_READERS 100
#define MAX_TITLE 100
#define MAX_NAME 100
#define MAX_CATEGORY 50
#define MAX_LOANS 100

// Structures
typedef struct {
    int id;
    char title[MAX_TITLE];
    char author[MAX_NAME];
    char category[MAX_CATEGORY];
    int available; // 1 if available, 0 if loaned
} Book;

typedef struct {
    int id;
    char name[MAX_NAME];
} Reader;

typedef struct {
    int bookId;
    int readerId;
    char loanDate[11];     // Format: YYYY-MM-DD
    char returnDate[11];   // Format: YYYY-MM-DD or "Not Returned"
} Loan;

// Global variables
Book books[MAX_BOOKS];
Reader readers[MAX_READERS];
Loan loans[MAX_LOANS];
int bookCount = 0;
int readerCount = 0;
int loanCount = 0;

// Function prototypes
void displayReports();
void printAvailableBooks();
void printLoanedBooks();
void printReaders();
void printLoanReport();
void addSampleData();
void getCurrentDate(char *dateBuffer);

// Main function for testing
int main() {
    addSampleData(); // Adding sample data for testing
    displayReports(); // Call the report display function
    return 0;
}

// Display Reports
void displayReports() {
    int choice;
    do {
        printf("\nReports:\n");
        printf("1. Available Books\n");
        printf("2. Loaned Books\n");
        printf("3. Readers\n");
        printf("4. Loan Report\n");
        printf("5. Back to Main Menu\n");

        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printAvailableBooks();
                break;
            case 2:
                printLoanedBooks();
                break;
            case 3:
                printReaders();
                break;
            case 4:
                printLoanReport();
                break;
            case 5:
                printf("Returning to main menu.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);
}

// Print Available Books
void printAvailableBooks() {
    printf("\nAvailable Books:\n");
    for (int i = 0; i < bookCount; i++) {
        if (books[i].available) {
            printf("ID: %d, Title: %s, Author: %s, Category: %s\n",
                   books[i].id, books[i].title, books[i].author, books[i].category);
        }
    }
}

// Print Loaned Books
void printLoanedBooks() {
    printf("\nLoaned Books:\n");
    for (int i = 0; i < bookCount; i++) {
        if (!books[i].available) {
            printf("ID: %d, Title: %s, Author: %s, Category: %s\n",
                   books[i].id, books[i].title, books[i].author, books[i].category);
        }
    }
}

// Print Readers
void printReaders() {
    printf("\nRegistered Readers:\n");
    for (int i = 0; i < readerCount; i++) {
        printf("ID: %d, Name: %s\n", readers[i].id, readers[i].name);
    }
}

// Print Loan Report
void printLoanReport() {
    printf("\nLoan Report:\n");
    printf("%-5s %-20s %-20s %-20s %-15s %-15s\n", "Loan#", "Reader Name", "Book Title", "Author", "Loan Date", "Return Date");
    printf("-----------------------------------------------------------------------------------------------\n");
    for (int i = 0; i < loanCount; i++) {
        int bookId = loans[i].bookId - 1;
        int readerId = loans[i].readerId - 1;

        printf("%-5d %-20s %-20s %-20s %-15s %-15s\n",
               i + 1,
               readers[readerId].name,
               books[bookId].title,
               books[bookId].author,
               loans[i].loanDate,
               loans[i].returnDate);
    }
}

// Add Sample Data
void addSampleData() {
    // Sample books
    books[0] = (Book){1, "Book A", "Author A", "Fiction", 0};
    books[1] = (Book){2, "Book B", "Author B", "Non-Fiction", 1};
    books[2] = (Book){3, "Book C", "Author C", "Fiction", 0};
    bookCount = 3;

    // Sample readers
    readers[0] = (Reader){1, "Reader A"};
    readers[1] = (Reader){2, "Reader B"};
    readerCount = 2;

    // Sample loans
    strcpy(loans[0].loanDate, "2024-12-01");
    strcpy(loans[0].returnDate, "2024-12-15");
    loans[0].bookId = 1;
    loans[0].readerId = 1;

    strcpy(loans[1].loanDate, "2024-12-05");
    strcpy(loans[1].returnDate, "Not Returned");
    loans[1].bookId = 3;
    loans[1].readerId = 2;

    loanCount = 2;
}

// Get Current Date
void getCurrentDate(char *dateBuffer) {
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    sprintf(dateBuffer, "%04d-%02d-%02d", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
}
